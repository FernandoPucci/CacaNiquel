package view;

import exceptions.InvalidMapException;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import model.IconGenerator;
import util.Constantes;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ETEC
 */
public class Principal extends javax.swing.JFrame {

    private int moeda;
    private int pontos;
    private int i1;
    private int i2;
    private int i3;

    private boolean isValor1Concluido = Boolean.FALSE;
    private boolean isValor2Concluido = Boolean.FALSE;
    private boolean isValor3Concluido = Boolean.FALSE;

    private IconGenerator iconGenerator;
    private Map<Integer, ImageIcon> mapaIcones = new TreeMap<>();

    public Principal() {
        initComponents();

        Map<Integer, ImageIcon> mapa = new TreeMap<>();
        try {

            this.iconGenerator = new IconGenerator(loadMap(mapa));
            mapaIcones = iconGenerator.getMapaArquivosIcones();

            btnValor1.setIcon(mapaIcones.get(2));
            btnValor2.setIcon(mapaIcones.get(2));
            btnValor3.setIcon(mapaIcones.get(2));

        } catch (InvalidMapException ex) {

            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnValor1 = new javax.swing.JButton();
        btnValor2 = new javax.swing.JButton();
        btnValor3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lbl_titulo_moeda = new javax.swing.JLabel();
        lbl_titulo_pontuacao = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnApostar = new javax.swing.JButton();
        btnJogar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("..:: CAÇA - NIQUEL ::..");
        setAlwaysOnTop(true);

        btnValor1.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 0, 0)));
        btnValor1.setFocusPainted(false);
        btnValor1.setFocusable(false);
        btnValor1.setMaximumSize(new java.awt.Dimension(136, 129));
        btnValor1.setMinimumSize(new java.awt.Dimension(136, 129));
        btnValor1.setOpaque(true);
        btnValor1.setPreferredSize(new java.awt.Dimension(136, 129));
        btnValor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValor1ActionPerformed(evt);
            }
        });

        btnValor2.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 0, 0)));
        btnValor2.setFocusPainted(false);
        btnValor2.setFocusable(false);
        btnValor2.setMaximumSize(new java.awt.Dimension(136, 129));
        btnValor2.setMinimumSize(new java.awt.Dimension(136, 129));
        btnValor2.setOpaque(true);
        btnValor2.setPreferredSize(new java.awt.Dimension(136, 129));
        btnValor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValor2ActionPerformed(evt);
            }
        });

        btnValor3.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 0, 0)));
        btnValor3.setFocusPainted(false);
        btnValor3.setFocusable(false);
        btnValor3.setMaximumSize(new java.awt.Dimension(136, 129));
        btnValor3.setMinimumSize(new java.awt.Dimension(136, 129));
        btnValor3.setOpaque(true);
        btnValor3.setPreferredSize(new java.awt.Dimension(136, 129));

        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));

        lbl_titulo_moeda.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        lbl_titulo_moeda.setText("Quantidade de Moedas:");

        lbl_titulo_pontuacao.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        lbl_titulo_pontuacao.setText("Pontuação");

        jLabel4.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        jLabel4.setText("00");

        jLabel2.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        jLabel2.setText("00");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbl_titulo_moeda, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbl_titulo_pontuacao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_titulo_moeda)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_titulo_pontuacao)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52))
        );

        btnApostar.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        btnApostar.setText("Apostar");
        btnApostar.setEnabled(false);
        btnApostar.setMaximumSize(new java.awt.Dimension(160, 56));
        btnApostar.setMinimumSize(new java.awt.Dimension(160, 56));
        btnApostar.setPreferredSize(new java.awt.Dimension(160, 56));
        btnApostar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApostarActionPerformed(evt);
            }
        });

        btnJogar.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        btnJogar.setText("Novo Jogo");
        btnJogar.setMaximumSize(new java.awt.Dimension(160, 56));
        btnJogar.setMinimumSize(new java.awt.Dimension(160, 56));
        btnJogar.setPreferredSize(new java.awt.Dimension(160, 56));
        btnJogar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJogarActionPerformed(evt);
            }
        });

        btnSair.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        btnSair.setText("Sair");
        btnSair.setMaximumSize(new java.awt.Dimension(160, 56));
        btnSair.setMinimumSize(new java.awt.Dimension(160, 56));
        btnSair.setPreferredSize(new java.awt.Dimension(160, 56));
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(btnValor1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(btnValor2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnValor3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(btnApostar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnJogar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnValor2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnValor3, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnValor1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnJogar, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnApostar, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(90, 90, 90))
        );

        setSize(new java.awt.Dimension(555, 451));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnApostarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApostarActionPerformed

        isValor1Concluido = Boolean.FALSE;
        isValor2Concluido = Boolean.FALSE;
        isValor3Concluido = Boolean.FALSE;

        getThreadRodarBtn1().start();
        getThreadRodarBtn2().start();
        getThreadRodarBtn3().start();
        getThreadChecarJogo().start();



    }//GEN-LAST:event_btnApostarActionPerformed

    private Thread getThreadChecarJogo() {

        return new Thread() {

            @Override
            public void run() {
                System.out.println("T");
                while (!isValor1Concluido || !isValor2Concluido || !isValor3Concluido) {
                    try {
                        //intervalo para sincronização de threads
                        Thread.sleep(5);
                    } catch (InterruptedException ex) {
                        //não há necessidade de tratarmos este erro
                    }
                }

                if (isValor1Concluido && isValor2Concluido && isValor3Concluido) {
                    System.out.println("Conferindo Jogo:");
                    checarJogo();

                }

            }

        };
    }

    private void btnJogarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJogarActionPerformed
        moeda = 20;
        pontos = 0;
        btnApostar.setEnabled(true);

        jLabel2.setText(String.valueOf(moeda));
        jLabel4.setText(String.valueOf(pontos));
    }//GEN-LAST:event_btnJogarActionPerformed

    private void btnValor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValor2ActionPerformed


    }//GEN-LAST:event_btnValor2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnValor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValor1ActionPerformed

    }//GEN-LAST:event_btnValor1ActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnSairActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    private void checarJogo() {

        int a = this.i1;
        int b = this.i2;
        int c = this.i3;

        System.out.println(">>> A[" + a + "], B[" + b + "], C[" + c + "]");

        if ((a == 7) && (b == 7) && (c == 7)) {
            moeda = moeda + 100;
            pontos = pontos + 100;
            JOptionPane.showMessageDialog(rootPane, "Parabéns, Você é o vencedor");
            jLabel2.setText(String.valueOf(moeda));
            jLabel4.setText(String.valueOf(pontos));

        } else if (((a == 7) && (b == 7)) || ((a == 7) && (c == 7)) || ((b == 7) && (c == 7))) {
            moeda = moeda + 2;
            pontos = pontos + 2;
            jLabel2.setText(String.valueOf(moeda));
            jLabel4.setText(String.valueOf(pontos));
        } else if ((a == 7) || (b == 7) || (c == 7)) {
            moeda = moeda + 1;
            pontos = pontos + 1;
            jLabel2.setText(String.valueOf(moeda));
            jLabel4.setText(String.valueOf(pontos));
        } else if ((a != 7) && (b != 7) && (c != 7)) {
            moeda = moeda - 1;
            jLabel2.setText(String.valueOf(moeda));
            jLabel4.setText(String.valueOf(pontos));
            if ((moeda == 0)) {
                JOptionPane.showMessageDialog(rootPane, "Você perdeu!");
                btnApostar.setEnabled(false);
                btnJogar.setEnabled(false);
                btnSair.setEnabled(false);
                btnValor1.setEnabled(false);
            }

        }

    }

    private Thread getThreadRodarBtn1() {
        return new Thread() {
            @Override
            public void run() {

                int indice = (int) (Math.random() * 100);
                System.out.println(indice);
                try {
                    do {
                        for (Map.Entry<Integer, ImageIcon> entry : iconGenerator.getMapaArquivosIcones().entrySet()) {
                            try {

                                btnValor1.setIcon(entry.getValue());
                                btnValor1.repaint();

                                if (indice > 90) {
                                    Thread.sleep(40);
                                } else if (indice > 80) {
                                    Thread.sleep(70);
                                } else if (indice > 70) {
                                    Thread.sleep(100);
                                } else if (indice > 60) {
                                    Thread.sleep(130);
                                } else if (indice > 50) {
                                    Thread.sleep(170);
                                } else if (indice > 40) {
                                    Thread.sleep(200);
                                } else if (indice > 30) {
                                    Thread.sleep(230);
                                } else if (indice > 20) {
                                    Thread.sleep(250);
                                } else if (indice > 10) {
                                    Thread.sleep(300);
                                } else if (indice > 7) {
                                    Thread.sleep(310);
                                } else if (indice > 5) {
                                    Thread.sleep(400);
                                }

                                indice--;
                                if (indice == 0) {
                                    i1 = (entry.getKey() + 1);
                                    isValor1Concluido = Boolean.TRUE;
                                    System.out.println(i1 + "- " + isValor1Concluido);
                                    break;
                                }
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    } while (indice > 0);

                } catch (InvalidMapException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        };
    }

    private Thread getThreadRodarBtn2() {
        return new Thread() {
            @Override
            public void run() {

                int indice = (int) (Math.random() * 100);
                System.out.println(indice);
                try {
                    do {
                        for (Map.Entry<Integer, ImageIcon> entry : iconGenerator.getMapaArquivosIcones().entrySet()) {
                            try {

                                btnValor2.setIcon(entry.getValue());
                                btnValor2.repaint();

                                if (indice > 90) {
                                    Thread.sleep(40);
                                } else if (indice > 80) {
                                    Thread.sleep(70);
                                } else if (indice > 70) {
                                    Thread.sleep(100);
                                } else if (indice > 60) {
                                    Thread.sleep(130);
                                } else if (indice > 50) {
                                    Thread.sleep(170);
                                } else if (indice > 40) {
                                    Thread.sleep(200);
                                } else if (indice > 30) {
                                    Thread.sleep(230);
                                } else if (indice > 20) {
                                    Thread.sleep(250);
                                } else if (indice > 10) {
                                    Thread.sleep(300);
                                } else if (indice > 7) {
                                    Thread.sleep(310);
                                } else if (indice > 5) {
                                    Thread.sleep(400);
                                }

                                indice--;
                                if (indice == 0) {
                                    i2 = (entry.getKey() + 1);
                                    isValor2Concluido = Boolean.TRUE;
                                    System.out.println(i2 + "- " + isValor2Concluido);
                                    break;
                                }
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    } while (indice > 0);

                } catch (InvalidMapException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        };
    }

    private Thread getThreadRodarBtn3() {
        return new Thread() {
            @Override
            public void run() {

                int indice = (int) (Math.random() * 100);
                System.out.println(indice);
                try {
                    do {
                        for (Map.Entry<Integer, ImageIcon> entry : iconGenerator.getMapaArquivosIcones().entrySet()) {
                            try {

                                btnValor3.setIcon(entry.getValue());
                                btnValor3.repaint();

                                if (indice > 90) {
                                    Thread.sleep(40);
                                } else if (indice > 80) {
                                    Thread.sleep(70);
                                } else if (indice > 70) {
                                    Thread.sleep(100);
                                } else if (indice > 60) {
                                    Thread.sleep(130);
                                } else if (indice > 50) {
                                    Thread.sleep(170);
                                } else if (indice > 40) {
                                    Thread.sleep(200);
                                } else if (indice > 30) {
                                    Thread.sleep(230);
                                } else if (indice > 20) {
                                    Thread.sleep(250);
                                } else if (indice > 10) {
                                    Thread.sleep(300);
                                } else if (indice > 7) {
                                    Thread.sleep(310);
                                } else if (indice > 5) {
                                    Thread.sleep(400);
                                }

                                indice--;
                                if (indice == 0) {
                                    i3 = (entry.getKey() + 1);
                                    isValor3Concluido = Boolean.TRUE;
                                    System.out.println(i2 + "- " + isValor3Concluido);
                                    break;
                                }
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    } while (indice > 0);

                } catch (InvalidMapException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        };
    }

    private Map<Integer, ImageIcon> loadMap(Map<Integer, ImageIcon> mapa) throws InvalidMapException {

        if (mapa != null) {

            for (int i = 0; i <= 6; i++) {

                switch (i) {

                    case 0:
                        mapa.put(i, new ImageIcon(getClass().getClassLoader().getResource(Constantes.PATH_FILE_0)));
                        break;
                    case 1:
                        mapa.put(i, new ImageIcon(getClass().getClassLoader().getResource(Constantes.PATH_FILE_1)));
                        break;
                    case 2:
                        mapa.put(i, new ImageIcon(getClass().getClassLoader().getResource(Constantes.PATH_FILE_2)));
                        break;
                    case 3:
                        mapa.put(i, new ImageIcon(getClass().getClassLoader().getResource(Constantes.PATH_FILE_3)));
                        break;
                    case 4:
                        mapa.put(i, new ImageIcon(getClass().getClassLoader().getResource(Constantes.PATH_FILE_4)));
                        break;
                    case 5:
                        mapa.put(i, new ImageIcon(getClass().getClassLoader().getResource(Constantes.PATH_FILE_5)));
                        break;
                    case 6:
                        mapa.put(i, new ImageIcon(getClass().getClassLoader().getResource(Constantes.PATH_FILE_6)));
                        break;
                }

            }
        } else {
            throw new InvalidMapException("Mapa nulo, impossível preencher");
        }

        return mapa;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApostar;
    private javax.swing.JButton btnJogar;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnValor1;
    private javax.swing.JButton btnValor2;
    private javax.swing.JButton btnValor3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbl_titulo_moeda;
    private javax.swing.JLabel lbl_titulo_pontuacao;
    // End of variables declaration//GEN-END:variables
}
